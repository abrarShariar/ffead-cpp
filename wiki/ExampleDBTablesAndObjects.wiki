#summary An Example Implementation of DB Tables and Objects

= {{{Test.h}}} =
{{{
#ifndef TEST_H_
#define TEST_H_
#include "string"
using namespace std;

class Test {
	int id;
	string name;
public:
	Test();
	virtual ~Test();
    int getId() const;
    void setId(int);
    string getName() const;
    void setName(string);
    bool operator<(Test t) const;
};

#endif /* TEST_H_ */

create table test (id int,name varchar(255));
}}}


= {{{Test2.h}}} =
{{{
#ifndef TEST2_H_
#define TEST2_H_
#include "Test.h"

class Test2 {
	int id;
	int test_id;
	Test test;
public:
	Test2();
	virtual ~Test2();
    int getId() const;
    void setId(int id);;
    int getTest_id() const;
    void setTest_id(int test_id);
    Test getTest() const;
    void setTest(Test test);
};

#endif /* TEST2_H_ */

create table test2 (id int,test_id int);
}}}


= {{{Test3.h}}} =
{{{
#ifndef TEST3_H_
#define TEST3_H_
#include "Test.h"
#include "vector"

class Test3 {
	int id;
	int test_id;
	vector<Test> tests;
public:
	Test3();
	virtual ~Test3();
    int getId() const;
    void setId(int id);
    vector<Test> getTests() const;
    void setTests(vector<Test> tests);
    int getTest_id() const;
    void setTest_id(int test_id);
};

#endif /* TEST3_H_ */

create table test3 (id int,test_id int);
}}}


= {{{Test4.h}}} =
{{{
#ifndef TEST4_H_
#define TEST4_H_
#include "Date.h"
#include "BinaryData.h"

class Test4 {
	Date date;
	Date datt;
	Date dattm;
	BinaryData binar;
public:
	Test4();
	virtual ~Test4();
	Date getDate() const;
    void setDate(Date date);
    Date getDatt() const;
    void setDatt(Date datt);
    Date getDattm() const;
    void setDattm(Date dattm);
    BinaryData getBinar() const;
    void setBinar(BinaryData binar);
};
#endif /* TEST4_H_ */

create table test4 (date date,datt datetime,dattm timestamp,binar blob);
}}}